library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.type_defines.all;

package addr_defines is

-- Functional Address Space Chip Selects
{%  for name, block in blocks.iteritems() %}
constant {{name}}_CS : natural := {{block.base}};
{%  endfor %}

-- Block Register Address Space

{%  for blockname, block in blocks.iteritems() %}
-- {{blockname}} Block:
{%      for fieldname, field in block.fields.iteritems() %}
{%          if field.cls in ['param', 'read', 'write' ] %}
constant {{blockname}}_{{fieldname}} : std_logic_vector := TO_SVECTOR({{field.reg[0]}}, BLK_AW);
{%          elif field.cls == "time" %}
constant {{blockname}}_{{fieldname}}_L : std_logic_vector := TO_SVECTOR({{field.reg[0]}}, BLK_AW);
constant {{blockname}}_{{fieldname}}_H : std_logic_vector := TO_SVECTOR({{field.reg[1]}}, BLK_AW);
{%          elif field.cls == "table" and field.reg[0] == "short" %}
constant {{blockname}}_{{fieldname}}_START : std_logic_vector := TO_SVECTOR({{field.reg[2]}}, BLK_AW);
constant {{blockname}}_{{fieldname}}_DATA : std_logic_vector := TO_SVECTOR({{field.reg[3]}}, BLK_AW);
constant {{blockname}}_{{fieldname}}_LENGTH : std_logic_vector := TO_SVECTOR({{field.reg[4]}}, BLK_AW);
{%          elif field.cls == "table" and field.reg[0] == "long" %}
constant {{blockname}}_{{fieldname}}_START : std_logic_vector := TO_SVECTOR({{field.reg[2]}}, BLK_AW);
constant {{blockname}}_{{fieldname}}_DATA : std_logic_vector := TO_SVECTOR({{field.reg[3]}}, BLK_AW);
{%          endif %}
{%      endfor %}

{%  endfor %}

end addr_defines;

package body addr_defines is


end addr_defines;
