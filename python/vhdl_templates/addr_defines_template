library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.type_defines.all;

package addr_defines is

-- Functional Address Space Chip Selects
{% for name, block in blocks.iteritems() %}
    {{-"constant %s_CS : natural := %d;"|format(name.replace("*",""), block.base )}}
{% endfor %}

-- Block Register Address Space

{% for blockname, block in blocks.iteritems() -%}

{{"-- %s Block:" |format(blockname )}}
{% for fieldname, field in block.fields.iteritems() %}
{% if field.cls in ['param', 'read', 'write' ] %}
{{"constant %s_%s : std_logic_vector := TO_SVECTOR(%s, BLK_AW);"|format(blockname, fieldname, field.reg[0])}}
{% elif field.cls == "time" %}
{{"constant %s_%s_L : std_logic_vector := TO_SVECTOR(%s, BLK_AW);"|format(blockname, fieldname, field.reg[0])}}
{{"constant %s_%s_H : std_logic_vector := TO_SVECTOR(%s, BLK_AW);"|format(blockname, fieldname, field.reg[1])}}
{% elif field.cls == "table" and field.reg[0] == "short" %}
{{"constant %s_%s_START : std_logic_vector := TO_SVECTOR(%s, BLK_AW);"|format(blockname, fieldname, field.reg[2])}}
{{"constant %s_%s_DATA : std_logic_vector := TO_SVECTOR(%s, BLK_AW);"|format(blockname, fieldname, field.reg[3])}}
{{"constant %s_%s_LENGTH : std_logic_vector := TO_SVECTOR(%s, BLK_AW);"|format(blockname, fieldname, field.reg[4])}}
{% elif field.cls == "table" and field.reg[0] == "long" %}
{{"constant %s_%s_START : std_logic_vector := TO_SVECTOR(%s, BLK_AW);"|format(blockname, fieldname, field.reg[2])}}
{{"constant %s_%s_DATA : std_logic_vector := TO_SVECTOR(%s, BLK_AW);"|format(blockname, fieldname, field.reg[3])}}
{% endif %}
{% endfor %}
{% endfor %}

end addr_defines;

package body addr_defines is


end addr_defines;
