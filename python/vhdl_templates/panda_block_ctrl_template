--------------------------------------------------------------------------------
--  File:       {{block.name|lower}}_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.type_defines.all;
use work.addr_defines.all;
use work.top_defines.all;

entity {{block.name|lower}}_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
{%  for regname, reg in block.registers.iteritems() %}
{%      if reg[1].cls in ['param', 'write', 'table', 'time'] %}
    {{regname}}       : out std_logic_vector(31 downto 0);
    {{regname}}_WSTB  : out std_logic;
{%      elif reg[1].cls in ['read'] %}
    {{regname}}       : in  std_logic_vector(31 downto 0);
{%      endif %}
{%  endfor %}
{%  for fieldname, field in block.fields.iteritems() %}
{%      if field.cls in ['bit_mux'] %}
    {{fieldname|lower}}_o : out std_logic;
{%      endif %}
{%  endfor %}
{%  for fieldname, field in block.fields.iteritems() %}
{%      if field.cls in ['pos_mux'] %}
    {{fieldname|lower}}_o : out std_logic_vector(31 downto 0);
{%      endif %}
{%  endfor %}
    -- Memory Bus Interface
    mem_cs_i            : in  std_logic;
    mem_wstb_i          : in  std_logic;
    mem_addr_i          : in  std_logic_vector(BLK_AW-1 downto 0);
    mem_dat_i           : in  std_logic_vector(31 downto 0);
    mem_dat_o           : out std_logic_vector(31 downto 0)
);
end {{block.name|lower}}_ctrl;

architecture rtl of {{block.name|lower}}_ctrl is

signal mem_addr : natural range 0 to (2**mem_addr_i'length - 1);

{%  for regname, reg in block.registers.iteritems() %}
{%      if reg[1].cls in ['bit_mux', 'pos_mux'] %}
signal {{regname}}      : std_logic_vector(31 downto 0);
signal {{regname}}_WSTB : std_logic;
{%      endif %}
{%  endfor %}

begin

mem_addr <= to_integer(unsigned(mem_addr_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
{%  for regname, reg in block.registers.iteritems() %}
{%      if reg[1].cls in ['param', 'write', 'table', 'time', 'bit_mux', 'pos_mux'] %}
            {{regname}} <= (others => '0');
            {{regname}}_WSTB <= '0';
{%      endif %}
{%  endfor %}
        else
{%  for regname, reg in block.registers.iteritems() %}
{%      if reg[1].cls in ['param', 'write', 'table', 'time', 'bit_mux', 'pos_mux'] %}
            {{regname}}_WSTB <= '0';
{%      endif %}
{%  endfor %}

            if (mem_cs_i = '1' and mem_wstb_i = '1') then
                -- Input Select Control Registers
{%  for regname, reg in block.registers.iteritems() %}
{%      if reg[1].cls in ['param', 'write', 'table', 'time', 'bit_mux', 'pos_mux'] %}
                if (mem_addr = {{block.name}}_{{regname}}) then
                    {{regname}} <= mem_dat_i;
                    {{regname}}_WSTB <= '1';
                end if;
{%      endif %}
{%  endfor %}

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            mem_dat_o <= (others => '0');
        else
            case (mem_addr) is
{%  for fieldname, field in block.fields.iteritems() %}
{%      if field.cls in ['read'] %}
                when {{block.name}}_{{fieldname}} =>
                    mem_dat_o <= {{fieldname}};
{%      endif %}
{%  endfor %}
                when others =>
                    mem_dat_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--
{%  for fieldname, field in block.fields.iteritems() %}
{%      if field.cls in ['bit_mux'] %}
bitmux_{{fieldname}} : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => {{fieldname|lower}}_o,
    BITMUX_SEL  => {{fieldname}},
    BIT_DLY     => {{fieldname}}_DLY
);

{%      endif %}
{%  endfor %}


{%  for fieldname, field in block.fields.iteritems() %}
{%      if field.cls in ['pos_mux'] %}
posmux_{{fieldname}} : entity work.posmux
port map (
    clk_i       => clk_i,
    posbus_i    => posbus_i,
    posn_o      => {{fieldname|lower}}_o,
    POSMUX_SEL  => {{fieldname}},
    POS_DLY     => (others => '0') --{{fieldname}}_DLY
);
{%      endif %}
{%  endfor %}

end rtl;
