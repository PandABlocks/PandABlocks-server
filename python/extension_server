#!/usr/bin/env python

# Simple template for a support server.

import argparse
import os
import sys
import imp
import socket
import logging.handlers


parser = argparse.ArgumentParser(description = 'PandA Extension Server')
parser.add_argument(
    '-d', '--daemon', action = 'store_true', help = 'Run as daemon process')
parser.add_argument(
    '-v', '--verbose', action = 'store_true', help = 'Log register access')
parser.add_argument(
    '-p', '--port', default = 9999, type = int, help = 'Specify socket port')
parser.add_argument(
    '-l', '--logfile', help = 'Specify log file to write to')
parser.add_argument(
    '-D', '--dummy', action = 'store_true', help = 'Always use dummy extension')
parser.add_argument(
    'extensions', help = 'Extension directory')
command_args = parser.parse_args()


# If we are logging to a file log there, otherwise to stdout
if command_args.verbose:
    level = logging.DEBUG
else:
    level = logging.INFO
if command_args.logfile:
    file_handler = logging.handlers.RotatingFileHandler(
        command_args.logfile, maxBytes=1000000, backupCount=4)
    logging.root.addHandler(file_handler)
    logging.root.setLevel(level)
else:
    logging.basicConfig(level=level, format='%(levelname)6s %(message)s')
logging.info('Starting Extension server')


# Initialise the extensions module from the path given to us.  We load this
# directory as a package.
imp.load_module(
    'extensions', None, command_args.extensions, ('', '', imp.PKG_DIRECTORY))


# Imports the named module from the extensions directory.  We use __import__
# rather than importlib simply to keep Python 2.6 compatibility for now.
def import_extension_module(name):
    extensions = __import__('extensions', None, None, [name])
    try:
        return getattr(extensions, name)
    except AttributeError:
        # Convert default error message into something more helpful
        raise Exception('Extension module \'%s\' not found' % name)



class Extensions:
    def __init__(self):
        self.id_table = {}
        self.next_id = 0

    # Adds an entity to the id table and returns the associated id.
    def add_entity(self, entity):
        id = self.next_id
        self.next_id += 1
        self.id_table[id] = entity
        return id

    # Decorator function for converting a simple action which can raise an
    # exception into a function returning either (True, success) or (False,
    # error message).
    def try_action(action):
        def caught_action(self, *args):
            try:
                return (True, action(self, *args))
            except Exception as e:
                logging.debug('Caught exception during parse', exc_info=True)

                # Convert parse exception into an error message.  It can happen
                # that the error message is empty, eg an unqualified assert
                # fail, so let's return something less obscure.
                e = str(e)
                if not e:
                    e = 'Unknown error'
                return (False, e)

        return caught_action

    @try_action
    def parse_block(self, line):
        # Syntax:   field-count module-name
        count, module_name = line.split()
        count = int(count)
        if command_args.dummy:
            module_name = 'dummy'
        block = import_extension_module(module_name).Extension(count)
        return self.add_entity(block)

    @try_action
    def parse_field(self, line):
        # Syntax:   ("R"|"W") block-id parse-args
        rw = line[0]
        block_id, parse_args = line[1:].split(' ', 1)
        block_id = int(block_id)
        block = self.id_table[block_id]

        if rw == 'R':
            parse = block.parse_read(parse_args)
        elif rw == 'W':
            parse = block.parse_write(parse_args)
        else:
            raise Exception('Invalid R/W field in parse')

        return self.add_entity(parse)

    @try_action
    def read(self, line):
        # Syntax:   parse-id field-num
        id, number = map(int, line.split(' ', 1))
        return self.id_table[id].read(number)

    def write(self, line):
        # Syntax:   parse-id field-num value
        id, number, value = map(int, line.split(' ', 2))
        self.id_table[id].write(number, value)


class Server:
    def __init__(self, port):
        self.server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.server_sock.bind(('localhost', port))
        self.server_sock.listen(0)
        # Will be filled in by self.run()
        self.file = None
        self.ext = None

    def process_response(self, prefix, action, line):
        success, response = action(line)
        if success:
            self.file.write('%c%u\n' % (prefix, response))
        else:
            # Truncate error response to avoid overrun errors
            self.file.write('E%s\n' % response[:250])
        self.file.flush()

    def process_write(self, line):
        pass

    def process_command(self, line):
        logging.debug('Read: %r', line)
        cmd, line = line[0], line[1:]

        if cmd == 'B':
            self.process_response('B', self.ext.parse_block, line)
        elif cmd == 'P':
            self.process_response('P', self.ext.parse_field, line)
        elif cmd == 'R':
            self.process_response('R', self.ext.read, line)
        elif cmd == 'W':
            self.ext.write(line)
        else:
            raise Exception('Invalid command character \'%c\'' % cmd)

    def run_service(self):
        while True:
            line = self.file.readline()[:-1]    # Prune trailing \n
            if not line:
                break

            try:
                self.process_command(line)
            except Exception:
                logging.exception('Unexpected exception')

    def run(self):
        conn, _ = self.server_sock.accept()
        self.server_sock.close()

        conn.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)
        self.file = conn.makefile()
        self.ext = Extensions()

        self.run_service()


# We daemonise the server by double forking
def daemonise(*keep_fds):
    if os.fork():
        # Exit first parent
        os._exit(0)
    # Do second fork to avoid generating zombies
    if os.fork():
        os._exit(0)
    # Detach from any controlling terminal and close stdout and stderr
    os.setsid()

    # Close parent FDs
    # http://code.activestate.com/recipes/278731/
    import resource             # Resource usage information.
    maxfd = resource.getrlimit(resource.RLIMIT_NOFILE)[1]
    if maxfd == resource.RLIM_INFINITY:
       maxfd = 1024

    # Iterate through and close all file descriptors.
    for fd in range(0, maxfd):
        if fd not in keep_fds:
            try:
                os.close(fd)
            except OSError:  # ERROR, fd wasn't open to begin with (ignored)
                pass


# Create the server right away and listen for one connection.
server = Server(command_args.port)
logging.info('Extension server ready')

# Need to daemonise after the listening port is ready but before calling accept.
# This ensures that when our caller gets control the connection will succeed.
if command_args.daemon:
    daemonise(server.server_sock.fileno())

try:
    server.run()
except KeyboardInterrupt:
    pass
logging.info('Extension server closed')
