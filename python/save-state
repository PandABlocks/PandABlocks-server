#!/usr/bin/env python

# Script to save the state of the given Panda.

from __future__ import print_function

import argparse
import socket


# Reads response lines from config socket.
class get_lines:
    def __init__(self, sock):
        self.sock = sock
        self.buf = ''
        self.lines = []

    def __iter__(self):
        return self

    def __read_lines(self, buf):
        while True:
            rx = sock.recv(65536)
            if not rx:
                raise StopIteration
            buf += rx

            lines = buf.split('\n')
            if len(lines) > 1:
                break

        return lines[0], lines[1:-1], lines[-1]


    def next(self):
        if self.lines:
            line = self.lines[0]
            del self.lines[0]
        else:
            line, self.lines, self.buf = self.__read_lines(self.buf)
        return line


def read_response(input, command):
    sock.sendall(command + '\n')
    for line in input:
        if line[0] == '!':
            yield line[1:]
        elif line[0] == '.':
            break
        else:
            assert False, 'Malformed response: "%s"' % line

def save_state(input, output, command):
    for line in read_response(input, command):
        print(line, file = output)


def save_table(input, output, table):
    assert table[-1] == '<'
    print(table + 'B', file = output)
    for line in read_response(input, table[:-1] + '.B?'):
        print(line, file = output)
    print(file = output)


def save_metatable(input, output, table):
    print(table, file = output)
    for line in read_response(input, table[:-1] + '?'):
        print(line, file = output)
    print(file = output)

def save_metadata(input, output, line):
    if line[-1] == '<':
        save_metatable(input, output, line)
    else:
        print(line, file = output)


# Argument processing
parser = argparse.ArgumentParser(
    description = 'Save Panda configuration state to file')
parser.add_argument(
    '--port', '-p', default = 8888, help = 'Configuration port number')
parser.add_argument(
    'hostname', help = 'Name or IP address of Panda device')
parser.add_argument(
    'destination', help = 'Destination filename')
args = parser.parse_args()


# Connect to requested Panda
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((args.hostname, args.port))

input = get_lines(sock)
output = file(args.destination, 'w')

# First save the CONFIG state
save_state(input, output, '*CHANGES.ATTR?')
save_state(input, output, '*CHANGES.CONFIG?')

# Now save the individual tables.
# Note that we must read the complete table response before processing!
tables = list(read_response(input, '*CHANGES.TABLE?'))
for table in tables:
    save_table(input, output, table)

# Finally the metadata is a bit more tricky, because the table and value results
# are mixed together.
metadata = list(read_response(input, '*CHANGES.METADATA?'))
for line in metadata:
    save_metadata(input, output, line)
